import React, { useState } from 'react';
import { IonPage, IonContent, IonItem, IonInput, IonButton, IonImg, IonText, IonRouterLink, IonToggle } from '@ionic/react';
import { createUserWithEmailAndPassword } from "firebase/auth";
import { auth } from "../firebaseConfig";
import { getFirestore, collection, doc, setDoc } from "firebase/firestore";  // Firestore functions
import { useHistory } from 'react-router-dom';
import './Login.css';

const Signup: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [error, setError] = useState<string | null>(null);
  const history = useHistory();

  const handleSignup = async () => {
    setError(null);

    if (!email || !password || !name) {
      setError("All fields are required!");
      return;
    }

    try {
      // Create user with Firebase Authentication
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);

      // Get Firestore database instance
      const db = getFirestore();
      const formattedDate = new Date().toLocaleDateString('en-US');
      
      // Create a new document in the 'users' collection with the new user's info
      await setDoc(doc(db, "users", userCredential.user.uid), {
        name: name,             // Name from input
        email: email,           // Email from input
        friends: [],            // Empty array for friends
        id: userCredential.user.uid, // Firestore autogenerated ID (same as UID)
        picture: "profile.png",  // Default profile picture
        createdAt: formattedDate,  // Timestamp of creation
      });

      // Clear the fields after successful signup
      setEmail("");
      setPassword("");
      setName("");

      // Redirect to login after successful signup
      history.push("/login");  

    } catch (err: any) {
      setError(err.message);  // Show Firebase error message if any
    }
  };

  return (
    <IonPage>
      <IonContent fullscreen className="login-content" scrollY={false}>
        <div className="login-wrapper">
          <IonImg src="/assets/imgs/logo.png" alt="App Logo" className="app-logoLogin" />
          
          <IonItem className="input-field">
            <IonInput 
              placeholder="Name"
              value={name}
              onIonChange={(e) => setName(e.detail.value ?? "")}
            />
          </IonItem>
          
          <IonItem className="input-field">
            <IonInput 
              placeholder="Email"
              type="email"
              value={email}
              onIonChange={(e) => setEmail(e.detail.value ?? "")}
            />
          </IonItem>
          
          <IonItem className="input-field">
            <IonInput 
              placeholder="Password"
              type="password"
              value={password}
              onIonChange={(e) => setPassword(e.detail.value ?? "")}
            />
          </IonItem>

          <IonToggle checked={false}>I agree to my data being stored:</IonToggle>
          
          {error && <IonText color="danger">{error}</IonText>}
          
          <IonButton expand="full" shape="round" size="large" className="login-button" onClick={handleSignup}>
            Signup
          </IonButton>
          
          <IonText className="signup-text">
            Already have an account?{' '}
            <IonRouterLink className="signup-link" routerLink="/login">
              Login now.
            </IonRouterLink>
          </IonText>
        </div>
      </IonContent>
    </IonPage>
  );
};

export default Signup;

